import json
from langchain.schema import HumanMessage, SystemMessage
from langchain.prompts import ChatPromptTemplate
from application.ai.llm import llm
from application.play.actor import Actor  # Your Actor class
from application.play.director import Director  # Your Director class

class Player:
    def __init__(self, name, description):
        self.name = name
        self.description = description
        self.system_prompt = f"""You are {name}, a lively and engaged participant in the drama.
Description: {description}
"""
        
    def reply(self, instructions, chat_history):
        # Display the director's instructions for context and then prompt the player.
        print(f"\nDirector instructs you: {instructions}")
        player_line = input("Your line: ")
        return player_line

class Stage:
    def __init__(self, actors, director, player, plot_objectives):
        """
        actors: dict mapping actor names to Actor objects.
        director: a Director object.
        player: a Player object.
        plot_objectives: list of plot objective strings.
        """
        self.actors = actors
        self.director = director
        self.player = player
        self.plot_objectives = plot_objectives
        self.current_objective_index = 0
        self.chat_history = ""  # running dialogue/script

    def add_to_chat_history(self, text):
        if self.chat_history:
            self.chat_history += "\n" + text
        else:
            self.chat_history = text

    def current_objective(self):
        if self.current_objective_index < len(self.plot_objectives):
            return self.plot_objectives[self.current_objective_index]
        return None

    def process_director_script(self, script_json):
        """Process the JSON script generated by the director.
           For each line, if the role matches an actor name, call that actor's reply method,
           or if it is 'Player', prompt for player input.
        """
        # Remove markdown code fences if present.
        script_str = script_json.strip()
        if script_str.startswith("```") and script_str.endswith("```"):
            script_str = script_str.strip("`").strip()
        
        try:
            script_data = json.loads(script_str)
        except Exception as e:
            print("Error parsing director script JSON:", e)
            script_data = {"scripts": []}
        
        for line in script_data.get("scripts", []):
            role = line.get("role", "")
            # For actor lines, check for "instruction" then "content"
            if "instruction" in line:
                instructions = line["instruction"]
            else:
                instructions = line.get("content", "")
                
            if role in self.actors:
                actor = self.actors[role]
                # Update the actor's chat_history dynamically before calling reply.
                actor.chat_history = self.chat_history
                reply_output = actor.reply(instructions)
                dialogue_line = f"{role}: {reply_output}"
                print(dialogue_line)
                self.add_to_chat_history(dialogue_line)
            elif role.lower() == "narration":
                dialogue_line = f"Narration: {line.get('content', instructions)}"
                print(dialogue_line)
                self.add_to_chat_history(dialogue_line)
            elif role.lower() == "player":
                reply_output = self.player.reply(instructions, self.chat_history)
                dialogue_line = f"Player: {reply_output}"
                print(dialogue_line)
                self.add_to_chat_history(dialogue_line)
            else:
                # Unrecognized role; treat as narration.
                dialogue_line = f"{role}: {instructions}"
                print(dialogue_line)
                self.add_to_chat_history(dialogue_line)

    def advance_turn(self):
        objective = self.current_objective()
        if not objective:
            print("No current objective. Story complete.")
            return

        print(f"\n--- Advancing Turn for Plot Objective: '{objective}' ---")
        # Director generates an outline based on the current chat history and the current plot objective.
        outline = self.director.generate_outline(self.chat_history, objective)
        print("Director Outline:")
        print(outline)

        # Director generates turn instructions (script) based on the outline.
        script_json = self.director.generate_turn_instructions(self.chat_history, outline)
        print("Director Script Turn:")
        print(script_json)

        # Process the script: call actors' (or player's) reply methods accordingly.
        self.process_director_script(script_json)

        # Simulate completion of the current objective.
        print(f"Objective '{objective}' completed.")
        self.current_objective_index += 1

    def player_interrupt(self, player_input):
        print("\n--- Player Interrupts ---")
        # Add the player's input to the chat history.
        interrupt_line = f"Player: {player_input}"
        print(interrupt_line)
        self.add_to_chat_history(interrupt_line)
        # After the interruption, ask the director to generate a new outline and script that includes the player's input.
        current_obj = self.current_objective()
        if not current_obj:
            print("No current objective to continue after interruption.")
            return
        outline = self.director.generate_outline(self.chat_history, current_obj)
        print("Director Outline after Player Interrupt:")
        print(outline)

        script_json = self.director.generate_turn_instructions(self.chat_history, outline)
        print("Director Script Turn after Player Interrupt:")
        print(script_json)
        self.process_director_script(script_json)

    def run_stage(self):
        while self.current_objective_index < len(self.plot_objectives):
            self.advance_turn()
            # Prompt for a player interrupt after each turn.
            simulate_interrupt = input("\nEnter a player interrupt (or press Enter to continue): ")
            if simulate_interrupt:
                self.player_interrupt(simulate_interrupt)
        print("\nAll plot objectives completed. The story ends here.")
        print("\nFinal Chat History:")
        print(self.chat_history)

# ---------------- Test Code ----------------
if __name__ == "__main__":
    # Sample initialization for Director.
    show = "The Mysterious Play"
    description = "A dark comedy that explores relationships and hidden secrets."
    background = "The scene takes place in a dimly lit backstage area, creating an atmosphere of tension."
    actors_data = {
        "Chandler": "A sarcastic character from a famous TV show.",
        "Joey": "A lovable, goofy friend.",
        "Ross": "A somewhat awkward yet caring friend."
    }
    relations = "Chandler is best friends with Joey, and Ross is Chandler's roommate."
    player_description = "A lively and curious audience member who loves to interact."

    director = Director(show, description, background, actors_data, player_description, relations)

    # Sample initialization for Actors.
    actors = {
        "Chandler": Actor(
            name="Chandler",
            description="A sarcastic and witty character from a famous TV show.",
            relations='{"Joey": "best friend", "Ross": "roommate"}',
            background="At Central Perk with Joey and Ross.",
            llm=llm,
            chat_history="Chandler: Could I be any more sarcastic?"
        ),
        "Joey": Actor(
            name="Joey",
            description="A charming and sometimes clueless friend.",
            relations='{"Chandler": "best friend", "Ross": "roommate"}',
            background="At Central Perk enjoying a coffee.",
            llm=llm,
            chat_history="Joey: How you doin'?"
        ),
        "Ross": Actor(
            name="Ross",
            description="A caring friend who often finds himself in awkward situations.",
            relations='{"Chandler": "roommate", "Joey": "best friend"}',
            background="At Central Perk with Chandler and Joey.",
            llm=llm,
            chat_history="Ross: We were on a break!"
        )
    }

    # Initialize the Player (you will participate directly).
    player = Player(
        name="Player",
        description=player_description
    )

    # Define a list of plot objectives.
    plot_objectives = [
        "Reveal the hidden connection among the characters.",
        "Build tension towards the climax.",
        "Resolve the interpersonal conflicts."
    ]

    # Initialize the Stage with actors, director, player, and plot objectives.
    stage = Stage(actors=actors, director=director, player=player, plot_objectives=plot_objectives)

    # Run the stage.
    stage.run_stage()
